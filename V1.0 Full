#include "manobib.h"
#include "studentas.h"
#include <chrono>

using namespace std;
using namespace chrono;

void strategija_optimized(const string& input_filename) {
    auto start_read = high_resolution_clock::now();

    vector<studentas> students = studentas::readFromFile(input_filename);

    auto end_read = high_resolution_clock::now();
    auto duration_read = duration_cast<milliseconds>(end_read - start_read);
    cout << "Duomenu nuskaitymas uztruko: " << duration_read.count() << " ms\n";

    auto start_sort = high_resolution_clock::now();

    auto it = partition(students.begin(), students.end(), [](const studentas& s) {
        return s.getGalutinisVid() < 5.0;
        });

    vector<studentas> vargsiukai(students.begin(), it);
    vector<studentas> kietiakiai(it, students.end());

    auto end_sort = high_resolution_clock::now();
    auto duration_sort = duration_cast<milliseconds>(end_sort - start_sort);
    cout << "Studentu rusciavimas (partition) uztruko: " << duration_sort.count() << " ms\n";

    auto start_write = high_resolution_clock::now();

    studentas::writeToFile(vargsiukai, "vargsiukai_" + input_filename);
    studentas::writeToFile(kietiakiai, "kietiakiai_" + input_filename);

    auto end_write = high_resolution_clock::now();
    auto duration_write = duration_cast<milliseconds>(end_write - start_write);
    cout << "Isvedimas i failus uztruko: " << duration_write.count() << " ms\n";
}

int main() {
    vector<string> input_files = {
        "studentai1000.txt",
        "studentai10000.txt",
        "studentai100000.txt",
        "studentai1000000.txt"
    };

    cout << "Testuojama su optimizuotu std::partition algoritmu\n";
    for (const auto& file : input_files) {
        strategija_optimized(file);
    }

    return 0;
}
